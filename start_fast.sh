#!/bin/bash

# =============================================================================
# VINTED MONITOR - LANCEMENT OPTIMIS√â POUR NOTIFICATIONS INSTANTAN√âES
# =============================================================================

echo "üöÄ D√âMARRAGE VINTED MONITOR - MODE NOTIFICATIONS INSTANTAN√âES"
echo "=============================================================="

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages color√©s
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier si le script est ex√©cutable
if [ ! -x "$0" ]; then
    chmod +x "$0"
    log_success "Script rendu ex√©cutable"
fi

# Copier la configuration optimis√©e
if [ -f ".env.fast" ]; then
    cp .env.fast .env
    log_success "Configuration optimis√©e appliqu√©e (.env.fast ‚Üí .env)"
else
    log_error "Fichier .env.fast introuvable !"
    exit 1
fi

# V√©rifier l'environnement virtuel
if [ ! -d "venv" ]; then
    log_info "Cr√©ation de l'environnement virtuel..."
    python3 -m venv venv
    log_success "Environnement virtuel cr√©√©"
fi

# Activer l'environnement virtuel
log_info "Activation de l'environnement virtuel..."
source venv/bin/activate

# Installer/mettre √† jour les d√©pendances
log_info "Installation des d√©pendances..."
pip install -r requirements.txt > /dev/null 2>&1
log_success "D√©pendances install√©es"

# Installer Playwright si n√©cessaire
if ! playwright --version > /dev/null 2>&1; then
    log_info "Installation de Playwright..."
    playwright install chromium > /dev/null 2>&1
    log_success "Playwright install√©"
fi

# Cr√©er les dossiers n√©cessaires
mkdir -p logs data config
log_success "Dossiers cr√©√©s"

# V√©rifier la configuration
log_info "V√©rification de la configuration..."

# Test rapide de l'installation
python -c "
import sys
sys.path.insert(0, '.')
try:
    from app.config import ConfigManager
    from app.models import WatchConfig
    print('‚úÖ Configuration OK')
except Exception as e:
    print(f'‚ùå Erreur configuration: {e}')
    sys.exit(1)
" || exit 1

# Afficher les param√®tres optimis√©s
echo ""
log_info "PARAM√àTRES OPTIMIS√âS POUR NOTIFICATIONS INSTANTAN√âES :"
echo "   ‚Ä¢ Intervalle de polling : 10 secondes (au lieu de 30s)"
echo "   ‚Ä¢ Concurrence : 5 (au lieu de 2)"
echo "   ‚Ä¢ Pages par poll : 1 (au lieu de 2)"
echo "   ‚Ä¢ D√©lais r√©duits : 400-800ms (au lieu de 800-2200ms)"
echo "   ‚Ä¢ IA BLACKBOX activ√©e"
echo ""

# Demander confirmation
read -p "üöÄ D√©marrer le monitoring avec ces param√®tres optimis√©s ? (y/N) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    log_warning "D√©marrage annul√©"
    exit 0
fi

# Afficher les informations de d√©marrage
echo ""
log_success "D√âMARRAGE EN COURS..."
echo "üìä Watches configur√©es : $(python -c "
import yaml
try:
    with open('config/watches.yaml', 'r') as f:
        data = yaml.safe_load(f)
        print(len(data.get('watches', [])))
except:
    print('0')
")"
echo "üîó Discord webhook : Configur√©"
echo "ü§ñ IA BLACKBOX : Activ√©e"
echo "üìà Google Sheets : Activ√©"
echo ""

log_info "Pour arr√™ter le monitoring, appuyez sur Ctrl+C"
echo "=============================================================="

# D√©marrer le monitoring
python -m app.main run

# Message de fin
echo ""
log_info "Monitoring arr√™t√©"
log_success "√Ä bient√¥t ! üëã"
